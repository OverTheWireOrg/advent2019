/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Game.FailureMessage', null, global);
goog.exportSymbol('proto.Game.Flight', null, global);
goog.exportSymbol('proto.Game.Fly', null, global);
goog.exportSymbol('proto.Game.GameRecord', null, global);
goog.exportSymbol('proto.Game.InitialInput', null, global);
goog.exportSymbol('proto.Game.Link', null, global);
goog.exportSymbol('proto.Game.Star', null, global);
goog.exportSymbol('proto.Game.StarPosition', null, global);
goog.exportSymbol('proto.Game.TurnInput', null, global);
goog.exportSymbol('proto.Game.TurnOutput', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.InitialInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Game.InitialInput.repeatedFields_, null);
};
goog.inherits(proto.Game.InitialInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Game.InitialInput.displayName = 'proto.Game.InitialInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Game.InitialInput.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Game.InitialInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Game.InitialInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Game.InitialInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.InitialInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    starPositionsList: jspb.Message.toObjectList(msg.getStarPositionsList(),
    proto.Game.StarPosition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.InitialInput}
 */
proto.Game.InitialInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Game.InitialInput;
  return proto.Game.InitialInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.InitialInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.InitialInput}
 */
proto.Game.InitialInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Game.StarPosition;
      reader.readMessage(value,proto.Game.StarPosition.deserializeBinaryFromReader);
      msg.addStarPositions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.InitialInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Game.InitialInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.InitialInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.InitialInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarPositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Game.StarPosition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StarPosition star_positions = 1;
 * @return {!Array<!proto.Game.StarPosition>}
 */
proto.Game.InitialInput.prototype.getStarPositionsList = function() {
  return /** @type{!Array<!proto.Game.StarPosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Game.StarPosition, 1));
};


/** @param {!Array<!proto.Game.StarPosition>} value */
proto.Game.InitialInput.prototype.setStarPositionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Game.StarPosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Game.StarPosition}
 */
proto.Game.InitialInput.prototype.addStarPositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Game.StarPosition, opt_index);
};


proto.Game.InitialInput.prototype.clearStarPositionsList = function() {
  this.setStarPositionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.TurnInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Game.TurnInput.repeatedFields_, null);
};
goog.inherits(proto.Game.TurnInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Game.TurnInput.displayName = 'proto.Game.TurnInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Game.TurnInput.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Game.TurnInput.prototype.toObject = function(opt_includeInstance) {
  return proto.Game.TurnInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Game.TurnInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.TurnInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    starsList: jspb.Message.toObjectList(msg.getStarsList(),
    proto.Game.Star.toObject, includeInstance),
    linkList: jspb.Message.toObjectList(msg.getLinkList(),
    proto.Game.Link.toObject, includeInstance),
    flightList: jspb.Message.toObjectList(msg.getFlightList(),
    proto.Game.Flight.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.TurnInput}
 */
proto.Game.TurnInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Game.TurnInput;
  return proto.Game.TurnInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.TurnInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.TurnInput}
 */
proto.Game.TurnInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Game.Star;
      reader.readMessage(value,proto.Game.Star.deserializeBinaryFromReader);
      msg.addStars(value);
      break;
    case 2:
      var value = new proto.Game.Link;
      reader.readMessage(value,proto.Game.Link.deserializeBinaryFromReader);
      msg.addLink(value);
      break;
    case 3:
      var value = new proto.Game.Flight;
      reader.readMessage(value,proto.Game.Flight.deserializeBinaryFromReader);
      msg.addFlight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.TurnInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Game.TurnInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.TurnInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.TurnInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Game.Star.serializeBinaryToWriter
    );
  }
  f = message.getLinkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Game.Link.serializeBinaryToWriter
    );
  }
  f = message.getFlightList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Game.Flight.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Star stars = 1;
 * @return {!Array<!proto.Game.Star>}
 */
proto.Game.TurnInput.prototype.getStarsList = function() {
  return /** @type{!Array<!proto.Game.Star>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Game.Star, 1));
};


/** @param {!Array<!proto.Game.Star>} value */
proto.Game.TurnInput.prototype.setStarsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Game.Star=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Game.Star}
 */
proto.Game.TurnInput.prototype.addStars = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Game.Star, opt_index);
};


proto.Game.TurnInput.prototype.clearStarsList = function() {
  this.setStarsList([]);
};


/**
 * repeated Link link = 2;
 * @return {!Array<!proto.Game.Link>}
 */
proto.Game.TurnInput.prototype.getLinkList = function() {
  return /** @type{!Array<!proto.Game.Link>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Game.Link, 2));
};


/** @param {!Array<!proto.Game.Link>} value */
proto.Game.TurnInput.prototype.setLinkList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Game.Link=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Game.Link}
 */
proto.Game.TurnInput.prototype.addLink = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Game.Link, opt_index);
};


proto.Game.TurnInput.prototype.clearLinkList = function() {
  this.setLinkList([]);
};


/**
 * repeated Flight flight = 3;
 * @return {!Array<!proto.Game.Flight>}
 */
proto.Game.TurnInput.prototype.getFlightList = function() {
  return /** @type{!Array<!proto.Game.Flight>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Game.Flight, 3));
};


/** @param {!Array<!proto.Game.Flight>} value */
proto.Game.TurnInput.prototype.setFlightList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Game.Flight=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Game.Flight}
 */
proto.Game.TurnInput.prototype.addFlight = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Game.Flight, opt_index);
};


proto.Game.TurnInput.prototype.clearFlightList = function() {
  this.setFlightList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.TurnOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Game.TurnOutput.repeatedFields_, null);
};
goog.inherits(proto.Game.TurnOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Game.TurnOutput.displayName = 'proto.Game.TurnOutput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Game.TurnOutput.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Game.TurnOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.Game.TurnOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Game.TurnOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.TurnOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    flyList: jspb.Message.toObjectList(msg.getFlyList(),
    proto.Game.Fly.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.TurnOutput}
 */
proto.Game.TurnOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Game.TurnOutput;
  return proto.Game.TurnOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.TurnOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.TurnOutput}
 */
proto.Game.TurnOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Game.Fly;
      reader.readMessage(value,proto.Game.Fly.deserializeBinaryFromReader);
      msg.addFly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.TurnOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Game.TurnOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.TurnOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.TurnOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Game.Fly.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Fly fly = 1;
 * @return {!Array<!proto.Game.Fly>}
 */
proto.Game.TurnOutput.prototype.getFlyList = function() {
  return /** @type{!Array<!proto.Game.Fly>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Game.Fly, 1));
};


/** @param {!Array<!proto.Game.Fly>} value */
proto.Game.TurnOutput.prototype.setFlyList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Game.Fly=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Game.Fly}
 */
proto.Game.TurnOutput.prototype.addFly = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Game.Fly, opt_index);
};


proto.Game.TurnOutput.prototype.clearFlyList = function() {
  this.setFlyList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.StarPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Game.StarPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Game.StarPosition.displayName = 'proto.Game.StarPosition';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Game.StarPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.Game.StarPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Game.StarPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.StarPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.StarPosition}
 */
proto.Game.StarPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Game.StarPosition;
  return proto.Game.StarPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.StarPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.StarPosition}
 */
proto.Game.StarPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.StarPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Game.StarPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.StarPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.StarPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.Game.StarPosition.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Game.StarPosition.prototype.setX = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.Game.StarPosition.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Game.StarPosition.prototype.setY = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.Star = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Game.Star, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Game.Star.displayName = 'proto.Game.Star';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Game.Star.prototype.toObject = function(opt_includeInstance) {
  return proto.Game.Star.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Game.Star} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.Star.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    richness: jspb.Message.getFieldWithDefault(msg, 2, 0),
    owner: jspb.Message.getFieldWithDefault(msg, 3, 0),
    shipCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    turnsToNextProduction: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.Star}
 */
proto.Game.Star.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Game.Star;
  return proto.Game.Star.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.Star} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.Star}
 */
proto.Game.Star.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRichness(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwner(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShipCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTurnsToNextProduction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.Star.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Game.Star.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.Star} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.Star.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRichness();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOwner();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getShipCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTurnsToNextProduction();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Game.Star.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Game.Star.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 richness = 2;
 * @return {number}
 */
proto.Game.Star.prototype.getRichness = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Game.Star.prototype.setRichness = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 owner = 3;
 * @return {number}
 */
proto.Game.Star.prototype.getOwner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Game.Star.prototype.setOwner = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 ship_count = 4;
 * @return {number}
 */
proto.Game.Star.prototype.getShipCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Game.Star.prototype.setShipCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 turns_to_next_production = 5;
 * @return {number}
 */
proto.Game.Star.prototype.getTurnsToNextProduction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Game.Star.prototype.setTurnsToNextProduction = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.Link = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Game.Link, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Game.Link.displayName = 'proto.Game.Link';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Game.Link.prototype.toObject = function(opt_includeInstance) {
  return proto.Game.Link.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Game.Link} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.Link.toObject = function(includeInstance, msg) {
  var f, obj = {
    starIdA: jspb.Message.getFieldWithDefault(msg, 1, 0),
    starIdB: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.Link}
 */
proto.Game.Link.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Game.Link;
  return proto.Game.Link.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.Link} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.Link}
 */
proto.Game.Link.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStarIdA(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStarIdB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.Link.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Game.Link.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.Link} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.Link.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarIdA();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStarIdB();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 star_id_a = 1;
 * @return {number}
 */
proto.Game.Link.prototype.getStarIdA = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Game.Link.prototype.setStarIdA = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 star_id_b = 2;
 * @return {number}
 */
proto.Game.Link.prototype.getStarIdB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Game.Link.prototype.setStarIdB = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.Flight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Game.Flight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Game.Flight.displayName = 'proto.Game.Flight';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Game.Flight.prototype.toObject = function(opt_includeInstance) {
  return proto.Game.Flight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Game.Flight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.Flight.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromStarId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    toStarId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    shipCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    owner: jspb.Message.getFieldWithDefault(msg, 4, 0),
    turnsToArrival: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.Flight}
 */
proto.Game.Flight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Game.Flight;
  return proto.Game.Flight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.Flight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.Flight}
 */
proto.Game.Flight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFromStarId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setToStarId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShipCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwner(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTurnsToArrival(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.Flight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Game.Flight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.Flight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.Flight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromStarId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getToStarId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getShipCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOwner();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTurnsToArrival();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 from_star_id = 1;
 * @return {number}
 */
proto.Game.Flight.prototype.getFromStarId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Game.Flight.prototype.setFromStarId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 to_star_id = 2;
 * @return {number}
 */
proto.Game.Flight.prototype.getToStarId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Game.Flight.prototype.setToStarId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 ship_count = 3;
 * @return {number}
 */
proto.Game.Flight.prototype.getShipCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Game.Flight.prototype.setShipCount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 owner = 4;
 * @return {number}
 */
proto.Game.Flight.prototype.getOwner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Game.Flight.prototype.setOwner = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 turns_to_arrival = 5;
 * @return {number}
 */
proto.Game.Flight.prototype.getTurnsToArrival = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Game.Flight.prototype.setTurnsToArrival = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.Fly = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Game.Fly, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Game.Fly.displayName = 'proto.Game.Fly';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Game.Fly.prototype.toObject = function(opt_includeInstance) {
  return proto.Game.Fly.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Game.Fly} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.Fly.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromStarId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    toStarId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    shipCount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.Fly}
 */
proto.Game.Fly.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Game.Fly;
  return proto.Game.Fly.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.Fly} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.Fly}
 */
proto.Game.Fly.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFromStarId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setToStarId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShipCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.Fly.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Game.Fly.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.Fly} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.Fly.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromStarId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getToStarId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getShipCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 from_star_id = 1;
 * @return {number}
 */
proto.Game.Fly.prototype.getFromStarId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Game.Fly.prototype.setFromStarId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 to_star_id = 2;
 * @return {number}
 */
proto.Game.Fly.prototype.getToStarId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Game.Fly.prototype.setToStarId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 ship_count = 3;
 * @return {number}
 */
proto.Game.Fly.prototype.getShipCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Game.Fly.prototype.setShipCount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.GameRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Game.GameRecord.repeatedFields_, null);
};
goog.inherits(proto.Game.GameRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Game.GameRecord.displayName = 'proto.Game.GameRecord';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Game.GameRecord.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Game.GameRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.Game.GameRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Game.GameRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.GameRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialConfiguration: (f = msg.getInitialConfiguration()) && proto.Game.InitialInput.toObject(includeInstance, f),
    turnsList: jspb.Message.toObjectList(msg.getTurnsList(),
    proto.Game.TurnInput.toObject, includeInstance),
    scoresList: jspb.Message.getRepeatedFloatingPointField(msg, 3),
    failureMessageList: jspb.Message.toObjectList(msg.getFailureMessageList(),
    proto.Game.FailureMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.GameRecord}
 */
proto.Game.GameRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Game.GameRecord;
  return proto.Game.GameRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.GameRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.GameRecord}
 */
proto.Game.GameRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Game.InitialInput;
      reader.readMessage(value,proto.Game.InitialInput.deserializeBinaryFromReader);
      msg.setInitialConfiguration(value);
      break;
    case 2:
      var value = new proto.Game.TurnInput;
      reader.readMessage(value,proto.Game.TurnInput.deserializeBinaryFromReader);
      msg.addTurns(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setScoresList(value);
      break;
    case 4:
      var value = new proto.Game.FailureMessage;
      reader.readMessage(value,proto.Game.FailureMessage.deserializeBinaryFromReader);
      msg.addFailureMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.GameRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Game.GameRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.GameRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.GameRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialConfiguration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Game.InitialInput.serializeBinaryToWriter
    );
  }
  f = message.getTurnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Game.TurnInput.serializeBinaryToWriter
    );
  }
  f = message.getScoresList();
  if (f.length > 0) {
    writer.writePackedDouble(
      3,
      f
    );
  }
  f = message.getFailureMessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Game.FailureMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional InitialInput initial_configuration = 1;
 * @return {?proto.Game.InitialInput}
 */
proto.Game.GameRecord.prototype.getInitialConfiguration = function() {
  return /** @type{?proto.Game.InitialInput} */ (
    jspb.Message.getWrapperField(this, proto.Game.InitialInput, 1));
};


/** @param {?proto.Game.InitialInput|undefined} value */
proto.Game.GameRecord.prototype.setInitialConfiguration = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Game.GameRecord.prototype.clearInitialConfiguration = function() {
  this.setInitialConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Game.GameRecord.prototype.hasInitialConfiguration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TurnInput turns = 2;
 * @return {!Array<!proto.Game.TurnInput>}
 */
proto.Game.GameRecord.prototype.getTurnsList = function() {
  return /** @type{!Array<!proto.Game.TurnInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Game.TurnInput, 2));
};


/** @param {!Array<!proto.Game.TurnInput>} value */
proto.Game.GameRecord.prototype.setTurnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Game.TurnInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Game.TurnInput}
 */
proto.Game.GameRecord.prototype.addTurns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Game.TurnInput, opt_index);
};


proto.Game.GameRecord.prototype.clearTurnsList = function() {
  this.setTurnsList([]);
};


/**
 * repeated double scores = 3;
 * @return {!Array<number>}
 */
proto.Game.GameRecord.prototype.getScoresList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {!Array<number>} value */
proto.Game.GameRecord.prototype.setScoresList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Game.GameRecord.prototype.addScores = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.Game.GameRecord.prototype.clearScoresList = function() {
  this.setScoresList([]);
};


/**
 * repeated FailureMessage failure_message = 4;
 * @return {!Array<!proto.Game.FailureMessage>}
 */
proto.Game.GameRecord.prototype.getFailureMessageList = function() {
  return /** @type{!Array<!proto.Game.FailureMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Game.FailureMessage, 4));
};


/** @param {!Array<!proto.Game.FailureMessage>} value */
proto.Game.GameRecord.prototype.setFailureMessageList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Game.FailureMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Game.FailureMessage}
 */
proto.Game.GameRecord.prototype.addFailureMessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Game.FailureMessage, opt_index);
};


proto.Game.GameRecord.prototype.clearFailureMessageList = function() {
  this.setFailureMessageList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.FailureMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Game.FailureMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Game.FailureMessage.displayName = 'proto.Game.FailureMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Game.FailureMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Game.FailureMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Game.FailureMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.FailureMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    processId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.FailureMessage}
 */
proto.Game.FailureMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Game.FailureMessage;
  return proto.Game.FailureMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.FailureMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.FailureMessage}
 */
proto.Game.FailureMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProcessId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.FailureMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Game.FailureMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.FailureMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.FailureMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 process_id = 1;
 * @return {number}
 */
proto.Game.FailureMessage.prototype.getProcessId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Game.FailureMessage.prototype.setProcessId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.Game.FailureMessage.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Game.FailureMessage.prototype.setMsg = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.Game);
